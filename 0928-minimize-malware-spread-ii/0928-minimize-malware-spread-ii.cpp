#define N 400
class Solution {
public:
    //dsu
    int root[N];
    int sz[N];
    void make(int node){
        root[node]=node;
        sz[node]=1;
    }
    int find(int node){
        if(root[node]==node) return node;
        return root[node]=find(root[node]);
    }
    void Union(int u,int v){
        u=find(u);
        v=find(v);
        if(u==v) return;
        if(sz[u]>sz[v]) swap(u,v);
        root[u]=v;
        sz[v]+=sz[u];
    }
    vector<int>articulation_points;
    vector<vector<int>>graph;
    vector<bool>vis;
    int dy[4]={0,0,1,-1};
    int dx[4]={1,-1,0,0};
    vector<int>dis,low;
    int time=0;
    void dfs(int node,int par){
        int childs=0;
        vis[node]=1;
        dis[node]=low[time]=time;
        time++;
        for(auto child:graph[node]){
            if(child==par) continue;
            if(!vis[child]){
                childs++;
                dfs(child,node);
                low[node]=min(low[node],low[child]);
                if(low[child]>=dis[node] && par!=-1){
                     articulation_points.push_back(node);
                }
            }
            else{
                low[node]=min(low[node],dis[child]);
            }
        }
        if(childs>1 && par==-1){
            articulation_points.push_back(node);
        }
        
    }
    int minMalwareSpread(vector<vector<int>>& mat, vector<int>& initial) {
        int n=mat.size();
        //graph=vector<vector<int>>(n);
        // dis=vector<int>(n);
        // low=vector<int>(n);
        // vis=vector<bool>(n,0);
        // for(int i=0;i<n*n;i++){
        //      if(i/n!=i%n && mat[i/n][i%n]==1){
        //          //cout<<i/n<<i%n<<endl;
        //          graph[i/n].push_back(i%n);
        //      }
        // }
        // for(int i=0;i<n;i++){
        //     if(!vis[i]) dfs(i,-1);
        // }
        set<int>s;
        for(auto i:initial) s.insert(i);
        //sort(articulation_points.begin(),articulation_points.end());
        vector<int>match;
        //for(auto i:articulation_points) if(s.find(i)!=s.end()) match.push_back(i);
       
        //set<int>ap_par;
       // for(auto i:match) ap_par.insert(find(i));
        int mx=0;
        sort(initial.begin(),initial.end());
        int ans=*s.begin();
        for(auto j:initial){
                for(int i=0;i<n;i++){
                    make(i);
                }
                for(int i=0;i<n*n;i++){
                     if(i/n!=i%n && mat[i/n][i%n]==1){
                         if(i/n!=j && i%n!=j){
                              Union(i/n,i%n);
                         }
                     }
                }
                int temp=0;
                set<int>ini_par;
                for(int i:initial) if(i!=j) ini_par.insert(find(i));
                for(int i=0;i<n;i++){
                    if(root[i]==i){
                        cout<<i;
                        if(ini_par.find(i)!=ini_par.end()) continue;
                        else temp+=sz[i];
                    }
                }
              if(temp>mx){
                  mx=temp;
                  ans=j;
              }
        }
        return ans;
    }
};